name: Deploy Django Template

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  deploy-template:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv and llm tool
        run: |
          python -m pip install --upgrade pip uv
          uv tool install llm

      - name: Run template conversion
        run: python template-generator/scripts/convert_to_template.py

      - name: Checkout template repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/yads
          token: ${{ secrets.TEMPLATE_REPO_TOKEN }}
          path: template-repo
          fetch-depth: 0

      - name: Sync changes to template repository
        run: |
          # Use rsync to sync changes while preserving .git
          rsync -av --delete --exclude='.git' template-output/ template-repo/

      - name: Stage changes and check for differences
        id: check-changes
        working-directory: template-repo
        run: |
          git add .

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected, proceeding with commit"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Configure git
        if: ${{ steps.check-changes.outputs.has_changes == 'true' }}
        working-directory: template-repo
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Generate diff information for debugging
        if: ${{ steps.check-changes.outputs.has_changes == 'true' }}
        working-directory: template-repo
        run: |
          echo "=== FILES CHANGED ==="
          git diff --staged --name-status

          echo -e "\n=== DIFF SUMMARY ==="
          git diff --staged --stat

          echo -e "\n=== DIFF CONTENT ==="
          git diff --staged -- . ':!uv.lock'
          echo -e "\n"

      - name: Setup LLM template
        if: ${{ steps.check-changes.outputs.has_changes == 'true' }}
        id: setup-template
        run: |
          mkdir -p $(llm templates path)
          cp template-generator/commit-template.yaml $(llm templates path)/commit_msg.yaml

      - name: Generate commit message
        if: ${{ steps.check-changes.outputs.has_changes == 'true' }}
        id: generate-message
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          COMMIT_MESSAGE_MODEL: ${{ vars.LLM_MODEL || 'gpt-4o-mini' }}
          SOURCE_COMMIT: ${{ github.sha }}
          SOURCE_REF: ${{ github.ref }}
        working-directory: template-repo
        run: |
          # Get git diff for context
          DIFF_OUTPUT=$(git diff --staged --name-status)
          DIFF_CONTENT=$(git diff --staged -- . ':!uv.lock')

          # Generate commit message using llm template
          if [ -n "$OPENAI_API_KEY" ]; then
            echo "Generating commit message with LLM..."
            echo "Using model: $COMMIT_MESSAGE_MODEL"

            COMMIT_MSG=$(uv tool run llm -m "$COMMIT_MESSAGE_MODEL" -t commit_msg -p files_changed "$DIFF_OUTPUT" -p diff_content "$DIFF_CONTENT" -p source_commit "$SOURCE_COMMIT" -p source_ref "$SOURCE_REF" 2>&1)

            echo "LLM raw output:"
            echo "--- START LLM OUTPUT ---"
            echo "$COMMIT_MSG"
            echo "--- END LLM OUTPUT ---"

            if [ -z "$COMMIT_MSG" ]; then
              echo "LLM command failed returning empty message, using fallback"
              COMMIT_MSG="Update Django project template"$'\n\n'"Source: ${SOURCE_COMMIT:0:8}"$'\n'"Ref: $SOURCE_REF"
            else
              COMMIT_MSG="$COMMIT_MSG"$'\n\n'"This commit message was generated entirely by AI and has not been reviewed."
            fi

            # Add source commit reference if not already included
            if [[ "$COMMIT_MSG" != *"${SOURCE_COMMIT:0:8}"* ]]; then
              COMMIT_MSG="$COMMIT_MSG"$'\n\n'"Source: ${SOURCE_COMMIT:0:8}"
            fi

          else
            echo "Warning: OPENAI_API_KEY not set, using fallback commit message"
            COMMIT_MSG="Update Django project template"$'\n\n'"Source: ${SOURCE_COMMIT:0:8}"$'\n'"Ref: $SOURCE_REF"
          fi

          echo "Final commit message:"
          echo "===================="
          echo "$COMMIT_MSG"
          echo "===================="

          # Save commit message to output
          {
            echo "commit_message<<EOF"
            echo "$COMMIT_MSG"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Commit and push changes
        if: ${{ steps.check-changes.outputs.has_changes == 'true' }}
        working-directory: template-repo
        run: |
          COMMIT_MESSAGE="${{ steps.generate-message.outputs.commit_message }}"

          # Create a temporary file for the commit message to avoid shell interpretation issues
          echo "$COMMIT_MESSAGE" > /tmp/commit_message.txt

          git commit -F /tmp/commit_message.txt
          git push

          # Output commit message to GitHub step summary
          {
            echo "### Pushed with Commit Message"
            echo
            echo '```'
            echo "$COMMIT_MESSAGE"
            echo '```'
          } >> $GITHUB_STEP_SUMMARY
